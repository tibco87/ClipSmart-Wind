const axios = require('axios');

// Konfigur√°cia
const CONFIG = {
    BASE_URL: 'https://clipsmart-translation-proxy-4ved0le7k-tibco87s-projects.vercel.app',
    USERNAME: '',
    PASSWORD: 'clipsmart2025',
    EXTENSION_ID: 'nbpndheaoecmgnlmfpleeahoicpcbppj'
};

// Basic Auth credentials
const credentials = Buffer.from(`${CONFIG.USERNAME}:${CONFIG.PASSWORD}`).toString('base64');

// Axios instance s autentifik√°ciou
const api = axios.create({
    baseURL: CONFIG.BASE_URL,
    headers: {
        'Authorization': `Basic ${credentials}`,
        'Content-Type': 'application/json',
        'X-Extension-Id': CONFIG.EXTENSION_ID
    },
    timeout: 10000
});

// Test funkcie
async function testHealth() {
    try {
        console.log('üè• Testovanie health endpoint...');
        const response = await api.get('/health');
        console.log('‚úÖ Health OK:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå Health test zlyhal:', error.response?.status, error.response?.data);
        return false;
    }
}

async function testTranslation() {
    try {
        console.log('üîÑ Testovanie prekladu...');
        const response = await api.post('/translate', {
            text: 'Hello world',
            targetLang: 'sk'
        });
        console.log('‚úÖ Preklad OK:', response.data);
        return true;
    } catch (error) {
        console.error('‚ùå Preklad test zlyhal:', error.response?.status, error.response?.data);
        return false;
    }
}

async function testUnauthorized() {
    try {
        console.log('üö´ Testovanie neautorizovan√©ho pr√≠stupu...');
        const response = await axios.get(`${CONFIG.BASE_URL}/health`);
        console.log('‚ùå Neautorizovan√Ω pr√≠stup by mal zlyha≈•, ale pre≈°iel:', response.status);
        return false;
    } catch (error) {
        if (error.response?.status === 401) {
            console.log('‚úÖ Neautorizovan√Ω pr√≠stup spr√°vne zlyhal (401)');
            return true;
        } else {
            console.error('‚ùå Neoƒçak√°van√° chyba:', error.response?.status, error.response?.data);
            return false;
        }
    }
}

async function testRateLimit() {
    try {
        console.log('‚è±Ô∏è Testovanie rate limiting...');
        const promises = [];
        
        // 5 requestov naraz
        for (let i = 0; i < 5; i++) {
            promises.push(api.post('/translate', {
                text: `Test text ${i}`,
                targetLang: 'sk'
            }));
        }
        
        const responses = await Promise.all(promises);
        console.log('‚úÖ Rate limit test OK:', responses.length, 'requestov pre≈°lo');
        return true;
    } catch (error) {
        if (error.response?.status === 429) {
            console.log('‚úÖ Rate limit spr√°vne funguje (429)');
            return true;
        } else {
            console.error('‚ùå Neoƒçak√°van√° chyba pri rate limit teste:', error.response?.status, error.response?.data);
            return false;
        }
    }
}

// Hlavn√° funkcia
async function runTests() {
    console.log('üß™ Sp√∫≈°≈•am testy autentifikovan√©ho proxy servera...');
    console.log('==================================================');
    console.log(`üîó URL: ${CONFIG.BASE_URL}`);
    console.log(`üîë Heslo: ${CONFIG.PASSWORD}`);
    console.log(`üÜî Extension ID: ${CONFIG.EXTENSION_ID}`);
    console.log('');
    
    // Aktualizujte BASE_URL pred spusten√≠m
    if (CONFIG.BASE_URL.includes('your-proxy')) {
        console.log('‚ö†Ô∏è  Najprv aktualizujte BASE_URL v CONFIG objekte!');
        console.log('   Nahraƒète "your-proxy.vercel.app" skutoƒçnou URL');
        return;
    }
    
    const results = {
        health: await testHealth(),
        translation: await testTranslation(),
        unauthorized: await testUnauthorized(),
        rateLimit: await testRateLimit()
    };
    
    console.log('');
    console.log('üìä V√Ωsledky testov:');
    console.log('==================');
    console.log(`üè• Health: ${results.health ? '‚úÖ' : '‚ùå'}`);
    console.log(`üîÑ Preklad: ${results.translation ? '‚úÖ' : '‚ùå'}`);
    console.log(`üö´ Neautorizovan√Ω: ${results.unauthorized ? '‚úÖ' : '‚ùå'}`);
    console.log(`‚è±Ô∏è Rate Limit: ${results.rateLimit ? '‚úÖ' : '‚ùå'}`);
    
    const passed = Object.values(results).filter(Boolean).length;
    const total = Object.keys(results).length;
    
    console.log('');
    console.log(`üéØ Celkov√Ω v√Ωsledok: ${passed}/${total} testov pre≈°lo`);
    
    if (passed === total) {
        console.log('üéâ V≈°etky testy pre≈°li! Proxy server s autentifik√°ciou funguje spr√°vne.');
    } else {
        console.log('‚ö†Ô∏è  Niektor√© testy zlyhali. Skontrolujte konfigur√°ciu.');
    }
}

// Spustenie testov
if (require.main === module) {
    runTests().catch(console.error);
}

module.exports = { runTests, testHealth, testTranslation, testUnauthorized, testRateLimit };
